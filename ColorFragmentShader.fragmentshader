#version 330 core

// Interpolated values from the vertex shaders
in vec4 fragmentColor;
in vec3 fragPosition;
in vec3 vNormal;
in vec3 modelPosition;

in vec3 TangentViewPos;
in vec3 TangentFragPos;
in vec3 TangentLightPos;


uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec3 cameraPosition;

uniform bool useLight;
uniform bool useTexture;
uniform bool useNormalMap;
uniform samplerCube cubemap;
uniform samplerCube normalMap;



// Ouput data
out vec4 fragColor;

void main(){

	if (useLight && useTexture && useNormalMap) {
		vec3 normal = texture(normalMap, modelPosition).rgb;
    normal = normalize(normal * 2.0 - 1.0); // Convert from [0,1] to [-1,1]

    // get diffuse color
    vec3 color = texture(cubemap, modelPosition).rgb;
    // ambient
    vec3 ambient = 0.1 * color;
    // diffuse
    vec3 lightDir = normalize(TangentLightPos - TangentFragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * color;
    // specular
    vec3 viewDir = normalize(TangentViewPos - TangentFragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);

    vec3 specular = vec3(0.2) * spec;



    fragColor = vec4(ambient + diffuse + specular, 1.0);

	} else if (useLight && useTexture) {
		float ka = 0.5;
    vec3 ambient = ka * lightColor;

    float kd = 0.8;
    vec3 n = normalize(vNormal);
    vec3 l = normalize(lightPosition - fragPosition);

    float diff = max(dot(n, l), 0.0);
    vec3 diffuse = kd * diff * lightColor;

    float ks = 1.0;
    vec3 v = normalize(cameraPosition - fragPosition);
    vec3 r = reflect(-l, n);

    float spec = pow(max(dot(v, r), 0.0), 3.0);
    vec3 specular = ks * spec * lightColor;

    vec3 light = ambient + diffuse + specular;
    
    // Applying the light to the texture
    vec3 textureColor = texture(cubemap, modelPosition).rgb;
    vec3 finalColor = light * textureColor;
    
    fragColor = vec4(finalColor, 1.0);
		
	} else if (useLight) {

		float ka = 0.5;
		vec3 ambient = ka * lightColor;

		float kd = 0.8;
		vec3 n = normalize(vNormal);
		vec3 l = normalize(lightPosition - fragPosition);
		
		float diff = max(dot(n,l), 0.0);
		vec3 diffuse = kd * diff * lightColor;

		float ks = 1.0;
		vec3 v = normalize(cameraPosition - fragPosition);
		vec3 r = reflect(-l, n);

		float spec = pow(max(dot(v, r), 0.0), 3.0);
		vec3 specular = ks * spec * lightColor;

		vec3 light = (ambient + diffuse + specular) * fragmentColor.rgb;
		fragColor = vec4(light, 1.0);
		
		// fragColor = fragmentColor;
		// vec3 direction = modelPosition;

		// fragColor = texture(cubemap,direction);

	} else  if (useTexture) {
		vec3 direction = modelPosition;
		fragColor = texture(cubemap,direction);

	} else {
		fragColor = fragmentColor;
	}

}