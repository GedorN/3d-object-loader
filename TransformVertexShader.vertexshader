#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec4 vertexColor;
layout(location = 2) in vec3 normal;


uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat3 normalMatrix;
uniform mat4 startPos;

out vec3 vNormal;
out vec3 fragPosition;
out vec4 fragmentColor;
out vec3 modelPosition;


void main(){	

// Output vertexPosition_modelspace of the vertex, in clip space : MVP * vertexPosition_modelspace
	gl_Position = projection * view * model * vec4(vertexPosition_modelspace, 1.0);
	vNormal = normalize(normalMatrix * normal);
	fragPosition = vec3(model * vec4(vertexPosition_modelspace, 1.0));
	modelPosition =   vec3(startPos * vec4(vertexPosition_modelspace, 1.0));
	fragmentColor = vertexColor;
}

